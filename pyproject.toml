[tool.poetry]
name = "4k120"
version = "0.2.2"
description = "Set resolution and refresh rate to 4K @ 120Hz"
authors = ["Danny Stewart <danny@stewart.cc>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
psutil = "^6.0.0"
pynput = "^1.7.7"
pywin32 = "^306"
toml = "^0.10.2"

[tool.poetry.group.dev.dependencies]
pyinstaller = "^6.8.0"
mypy = "^1.10.1"
ruff = "^0.6.8"

[tool.pylint]
disable = [
    "broad-exception-caught",
    "c-extension-no-member",
    "import-error",
    "invalid-name",
    "line-too-long",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = false
ignore_missing_imports = true
check_untyped_defs = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
exclude = [
    ".git",
    ".mypy_cache",
    ".pyenv",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 100
indent-width = 4

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C",    # pylint convention
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "EM",   # flake8-errmsg
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "FIX",  # flake8-fixme
    "G001", # Logging statement uses str.format
    "G003", # Logging statement uses +
    "G004", # Logging statement uses f-strings
    "G010", # Logging statement uses warn instead of warning
    "G201", # Logging uses exc_info=True instead of .exception
    "G202", # Logging statement has redundant exc_info
    "ISC",  # flake8-implicit-str-concat
    "N",    # pep8-naming
    "PIE",  # flake8-pie
    "Q",    # flake8-quotes
    "R",    # pylint refactor
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",   # flake8-todos
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pylint warnings
]
ignore = [
    "ANN101", # Missing type annotation for 'self'
    "ANN102", # Missing type annotation for 'cls'
    "ANN204", # Missing return type annotation for __init__
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "B010",   # 'No docstring in module/class/method'
    "COM812", # Trailing comma missing
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D201",   # 'No blank lines allowed before function docstring'
    "D202",   # Blank lines after function definition
    "D203",   # 1 blank line required before class docstring
    "D204",   # 1 blank line required after class docstring
    "D205",   # 1 blank line required between summary line and description
    "D206",   # Docstring should be indented with spaces not tabs
    "D212",   # Multi-line docstring summary style
    "D400",   # First line should end with a period
    "D406",   # Section name should end with a newline
    "D407",   # Missing dashed underline after section
    "D413",   # Missing blank line after last section
    "E261",   # At least two spaces before inline comment (formatter fixes this)
    "E303",   # Too many blank lines (formatter fixes this)
    "E501",   # Line too long
    "N801",   # Function name should be lowercase
    "N806",   # Function name should be lowercase
    "RET502", # Do not implicitly `return None` in function able to return non-`None` value
    "RET503", # Missing explicit return at the end of function able to return non-None value
    "SIM102", # Use a single if statement instead of nested if statements (Sourcery)
    "T201",   # Use print statements
    "TD001",  # Invalid TODO format
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO
    "W291",   # Trailing whitespace
    "W293",   # Blank line contains whitespace
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
